import logging
import os
import time
from datetime import datetime

from aiogram import Bot, Dispatcher, executor, types
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
SHEET_NAME = "–ó–∞–¥–∞–Ω–∏—è –ß–µ–ª–ª–µ–Ω–¥–∂–∞ –ø–æ REELS"
sheet = client.open(SHEET_NAME).sheet1  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç

# –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
user_tasks = {}

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
last_messages = {}

@dp.message_handler(lambda message: "#–∑–∞–¥–∞–Ω–∏–µ" in message.text.lower())
async def handle_task(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    task_text = message.text.strip()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
    current_time = time.time()
    if user_id in last_messages:
        last_text, last_time = last_messages[user_id]
        if task_text == last_text and (current_time - last_time) < 10:
            # –î—É–±–ª–∏–∫–∞—Ç ‚Üí –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∏ –≤—Ä–µ–º—è
    last_messages[user_id] = (task_text, current_time)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    try:
        existing_tasks = sheet.col_values(3)
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return

    if task_text in existing_tasks:
        await message.reply("üö® –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ, —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç —É–∂–µ –±—ã–ª!")
        return

    try:
        sheet.append_row([user_id, username, task_text, timestamp])
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
        return

    if user_id not in user_tasks:
        user_tasks[user_id] = {"username": username, "count": 0}
    user_tasks[user_id]["count"] += 1

    await message.reply(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")

@dp.message_handler(commands=["—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
async def handle_stats(message: types.Message):
    if not user_tasks:
        await message.reply("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∑–∞–¥–∞–Ω–∏—è üò¢")
        return

    stats = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º:\n\n"
    for user in user_tasks.values():
        stats += f"@{user['username']}: {user['count']} –∑–∞–¥–∞–Ω–∏–π\n"

    await message.reply(stats)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
